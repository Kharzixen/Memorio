services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - network-1

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - network-1

  debezium:
    image: debezium/connect:latest
    container_name: debezium
    ports:
      - 8083:8083
    depends_on:
      - kafka
      - mysql
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium-config
      OFFSET_STORAGE_TOPIC: debezium-offset
      STATUS_STORAGE_TOPIC: debezium-status
      BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - network-1

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001" # MinIO server command
    networks:
      - network-1

  mysql:
    image: mysql:8.3
    container_name: mysql
    restart: on-failure
    ports:
      - "3307:3306"  # MySQL default port
    environment:
      MYSQL_ROOT_PASSWORD: 123456root  # Root user password
    volumes:
      - mysql-data:/var/lib/mysql  # Volume for persisting MySQL data
      - ./init/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - network-1




  discovery-server:
    build:
      context: ./discovery-server  # Path to the directory containing the Dockerfile for discovery-server
      dockerfile: Dockerfile   # Optional: Specify the Dockerfile name if it's different
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - network-1

  api-gateway:
    build:
      context: ./api-gateway  # Path to the directory containing the Dockerfile for api-gateway
      dockerfile: Dockerfile   # Optional: Specify the Dockerfile name if it's different
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - discovery-server
    networks:
      - network-1

  authentication-service:
    build:
      context: ./authentication-service  # Path to the directory containing the Dockerfile for authentication-service
      dockerfile: Dockerfile   # Optional: Specify the Dockerfile name if it's different
    container_name: authentication-service
    ports:
      - "8089:8089"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - discovery-server
      - mysql
    networks:
      - network-1

  media-service:
    build:
      context: ./media-service  # Path to the directory containing the Dockerfile for media-service
      dockerfile: Dockerfile   # Optional: Specify the Dockerfile name if it's different
    container_name: media-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - discovery-server
      - minio
      - mysql
    networks:
      - network-1

  post-service:
    build:
      context: ./post-service  # Path to the directory containing the Dockerfile for authentication-service
      dockerfile: Dockerfile   # Optional: Specify the Dockerfile name if it's different
    container_name: post-service
    ports:
      - "8087:8087"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - discovery-server
      - media-service
      - user-service
      - mysql
    networks:
      - network-1

  private-album-service:
    build:
      context: ./private-album-service  # Path to the directory containing the Dockerfile for authentication-service
      dockerfile: Dockerfile   # Optional: Specify the Dockerfile name if it's different
    container_name: private-album-service
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - discovery-server
      - media-service
      - user-service
      - mysql
    networks:
      - network-1

  public-album-service:
    build:
      context: ./public-album-service  # Path to the directory containing the Dockerfile for authentication-service
      dockerfile: Dockerfile   # Optional: Specify the Dockerfile name if it's different
    container_name: public-album-service
    ports:
      - "8088:8088"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - discovery-server
      - media-service
      - user-service
      - mysql
    networks:
      - network-1

  user-service:
    build:
      context: ./user-service  # Path to the directory containing the Dockerfile for authentication-service
      dockerfile: Dockerfile   # Optional: Specify the Dockerfile name if it's different
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - discovery-server
      - media-service
      - mysql
    networks:
      - network-1



networks:
  network-1:
    driver: bridge

volumes:
  minio-data:
    driver: local
  mysql-data:
    driver: local